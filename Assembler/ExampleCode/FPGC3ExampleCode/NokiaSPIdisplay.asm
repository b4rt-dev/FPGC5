; b4   b3   b2   b1   b0
; clk, dat, dc,  cs,  rst

; TODO:
; - Use framebuffer

define LCD_CMD 				= 0
define LCD_DATA 			= 1

define LCD_COMMAND_MODE 	= 0x21  ;FUNCTIONSET + extended instruction
define LCD_CONTRAST     	= 0xBF  ;LCD VOP Contrast Try 0xB1 or 0xBF if is too dark. range = ((0x00-0x7F) |0x80)
define LCD_TEMP_COEF    	= 0x04  ;Set Temp coefficient
define LCD_BIAS         	= 0x14  ;LCD bias mode 1:48: Try 0x13 or 0x14
define LCD_FUNCTIONSET  	= 0x20  ;We must send 0x20(hor) or 0x22(vert) before modifying the display control mode
define LCD_DISPLAYCONTROL 	= 0x0C  ;Set display control, 0x0C for normal mode. 0x0D for inverse
define LCD_POWERDOWN    	= 0x24  ;LCD power off

define LCD_X 				= 84
define LCD_Y 				= 48
define LCD_COL_ADDR 		= 0x80
define LCD_BANK_ADDR 		= 0x40


; RAM usage:
; RAM[0] - RAM[503] = framebuffer
; RAM[504] = position

Main:						; Main program code
	load 0 r7
	savpc r15
	push r15
	jump LCDinitSPI

	MainLoop:

	savpc r15
	push r15
	jump LCDcheckInput

	savpc r15
	push r15
	jump LCDsendFrameBuffer

	;savpc r15
	;push r15
	;jump LCDdelay

	jump MainLoop

	halt

LCDcheckInput:
	;Nespad addr 0x88000 r1
	load 0b1000000000000000 r1
	loadhi 0b1000 r1

	; read nespad
	read 0 r1 r2			; 24x0,r,l,d,u,st,sel,b,a

	; check b nespad
	load 0b00000001 r3		; b mask
	and r3 r2 r4			; compare
	bne r0 r4 LCDdoButtonPressB
	jump LCDskipButtonPressB
	LCDdoButtonPressB:
		addr2reg LCDdataChar_B r1
		savpc r15
		push r15
		jump LCDwriteCharToFrameBuffer 
		jump LCDendInputChecking
	LCDskipButtonPressB:

	; check a nespad
	load 0b100000000 r3		; a mask
	and r3 r2 r4			; compare
	bne r0 r4 LCDdoButtonPressA
	jump LCDskipButtonPressA
	LCDdoButtonPressA:
		addr2reg LCDdataChar_A r1
		savpc r15
		push r15
		jump LCDwriteCharToFrameBuffer 
		jump LCDendInputChecking
	LCDskipButtonPressA:

	; check x nespad
	load 0b1000000000 r3	; x mask
	and r3 r2 r4			; compare
	bne r0 r4 LCDdoButtonPressX
	jump LCDskipButtonPressX
	LCDdoButtonPressX:
		addr2reg LCDdataChar_X r1
		savpc r15
		push r15
		jump LCDwriteCharToFrameBuffer 
		jump LCDendInputChecking
	LCDskipButtonPressX:

	; check y nespad
	load 0b10 r3			; y mask
	and r3 r2 r4			; compare
	bne r0 r4 LCDdoButtonPressY
	jump LCDskipButtonPressY
	LCDdoButtonPressY:
		addr2reg LCDdataChar_Y r1
		savpc r15
		push r15
		jump LCDwriteCharToFrameBuffer 
		jump LCDendInputChecking
	LCDskipButtonPressY:
	nop 					; to prevent two labels below each other

	LCDendInputChecking:

	;return
	pop r15
	jump 3 r15


; writes char from address in r1 to framebuffer
LCDwriteCharToFrameBuffer:
	; r2 addr0 of ram
	load 0 r2
	loadhi 0b1000 r2

	; read offset position
	read 504 r2 r6
	; increase offset by 6
	add 6 r6 r7
	; write new offset back
	write 504 r2 r7
	; add offset to r2
	add r6 r2 r2

	; read data
	read 0 r1 r3 

	; shift and write to fb
	shiftr 24 r3 r4
	write 0 r2 r4
	shiftr 16 r3 r4
	write 1 r2 r4
	shiftr 8 r3 r4
	write 2 r2 r4
	write 3 r2 r3

	; read second data word
	read 1 r1 r3 
	
	; shift and write to fb
	shiftr 8 r3 r4
	write 4 r2 r4
	write 5 r2 r3

	;return
	pop r15
	jump 3 r15


; delay for some time
LCDdelay:
	;backup regs
	push r1
	push r2

	load 0 r1
	load 50000 r2

	LCDdelayLoop:
	nop
	add 1 r1 r1

	bne r1 r2 LCDdelayLoop

	;restore regs
	pop r2
	pop r1

	;return
	pop r15
	jump 3 r15


LCDdataChar_B:
	.db 0x7f 0x49 0x49 0x49 
	.db 0x00 0x00 0x36 0x00

LCDdataChar_A:
	.db 0x7e 0x11 0x11 0x11 
	.db 0x00 0x00 0x7e 0x00

LCDdataChar_X:
	.db 0x63 0x14 0x08 0x14 
	.db 0x00 0x00 0x63 0x00

LCDdataChar_Y:
	.db 0x07 0x08 0x70 0x08 
	.db 0x00 0x00 0x07 0x00

; initialize SPI display
LCDinitSPI:
	savpc r15
	push r15
	jump LCDreset
	
	; send command mode
	load LCD_COMMAND_MODE r1 	; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; send contrast
	load LCD_CONTRAST r1 		; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; send temp coef
	load LCD_TEMP_COEF r1 		; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; send bias
	load LCD_BIAS r1 			; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; send functionset
	load LCD_FUNCTIONSET r1 	; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; send displaycontrol
	load LCD_DISPLAYCONTROL r1 	; data
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	; clear screen after init
	savpc r15
	push r15
	jump LCDclearDisplay

	; set position to 0,0
	load 0 r1
	load 0 r2
	savpc r15
	push r15
	jump LCDsetPosition

	;return
	pop r15
	jump 3 r15


; sends data from addr in r1
; length is in r2
; maximum length is 32, minimum is 1
LCDsendWord:
	read 0 r1 r1 				; data to send in r1
	sub 1 r2 r3 				; copy r2 -1 to r3
	load LCD_DATA r2 			; type
	savpc r15
	push r15
	jump LCDsendSPI

	;return
	pop r15
	jump 3 r15


; resets display
LCDreset:
	load 0b00000011 r14
	load 0b00000010 r14
	load 0b00000011 r14 	; Initial state, with CS and RST high

	;return
	pop r15
	jump 3 r15


; sets LCD position
; r1 = x
; r2 = y
LCDsetPosition:
	add LCD_COL_ADDR r1 r1 		; set x address
	add LCD_BANK_ADDR r2 r2 	; set y address
	push r2 					; push y address to stack

	; set X position
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	pop r1 						; pop y address from stack
	; set Y position
	load LCD_CMD r2 			; type
	load 7 r3 					; length
	savpc r15
	push r15
	jump LCDsendSPI

	;return
	pop r15
	jump 3 r15


; clears the entire display
LCDclearDisplay:
	; set position to 0,0
	load 0 r1
	load 0 r2
	savpc r15
	push r15
	jump LCDsetPosition

	; do 504 writes of 0x00
	load 504 r10
	LCDclearLoop:
		load 0x00 r1 	; data
		load LCD_DATA r2 			; type
		load 7 r3 					; length
		savpc r15
		push r15
		jump LCDsendSPI
		sub 1 r10 r10
		bne r0 r10 LCDclearLoop

	; set position back to 0,0
	load 0 r1
	load 0 r2
	savpc r15
	push r15
	jump LCDsetPosition

	pop r15
	jump 3 r15


; sends entire framebuffer (504 bytes from ram) to display
LCDsendFrameBuffer:
	; set position to 0,0
	load 0 r1
	load 0 r2
	savpc r15
	push r15
	jump LCDsetPosition

	; we want to send data, so set dc high
	or 0b00000100 r14 r14		; set dc high

	; start SPI transmission
	savpc r15
	push r15
	jump LCDenableChip				; does not use registers

	; load register
	load 0 r9
	loadhi 0b1000 r9 				; r9 is now addr 0 of RAM
	load 0 r10 						; r10 is counter for ram addr
	load 503 r11					; r11 is max ram addr

	; send the next framebuffer byte from ram
	LCDFBsendNextRamByte:
	read 0 r9 r1 					; read framebuffer byte to r1
	load 7 r3 						; we send 8 bits per time (len-1)

	; send all 8 bits of the framebuffer byte
	LCDFBsendByte:
	load 1 r4
	shiftl r3 r4 r4 				; Bitmask (r4)

	; send high or low based on bit
	and r4 r1 r2					; Bitmask result (r2)

	; check if we have to clock a low bit
	beq r0 r2 LCDFBdoShiftLow
	jump LCDFBskipShiftLow
	LCDFBdoShiftLow:
		savpc r15
		push r15
		jump LCDshiftLow 			; does not use registers
	LCDFBskipShiftLow:


	; check if we have to clock a high bit
	bne r0 r2 LCDFBdoShiftHigh
	jump LCDFBskipShiftHigh
	LCDFBdoShiftHigh:
		savpc r15
		push r15
		jump LCDshiftHigh			; does not use registers
	LCDFBskipShiftHigh:

	; check if we have sent all 8 bits
	beq r0 r3 LCDFBdoneSendingByte	; When r3 reached 0, we have sent all 8 bits

	; not all 8 bits are sent, so decrease r3 and send next bit
	sub 1 r3 r3 					; Sub r3 by one
	jump LCDFBsendByte 				; Send next bit

	; we have sent a complete byte from ram
	LCDFBdoneSendingByte:
	add 1 r9 r9 					; add ram addr offset
	add 1 r10 r10 					; increase counter

	; check if we have sent all ram bytes
	bgt r10 r11 LCDFBdoneSendingFB

	; have not sent all bytes yet, so send next byte
	jump LCDFBsendNextRamByte

	; entire framebuffer is sent
	LCDFBdoneSendingFB:

	;stop SPI transmission
	savpc r15
	push r15
	jump LCDdisableChip 			; does not use registers
	
	;return
	pop r15
	jump 3 r15


; data to send is in r1
; dc value is in r2
; number of bits to send (-1) is in r3
LCDsendSPI:
	; if r2 == 0, set dc low
	beq r0 r2 LCDsetNClow
	jump LCDskipNClow
	LCDsetNClow:
		and 0b11111011 r14 r14		; set dc low
	LCDskipNClow:

	; if r2 != 0, set dc high
	bne r0 r2 LCDsetNChigh
	jump LCDskipNChigh
	LCDsetNChigh:
		or 0b00000100 r14 r14		; set dc high
	LCDskipNChigh:

	;start SPI transmission
	savpc r15
	push r15
	jump LCDenableChip				; does not use registers

	LCDsendBits:
	load 1 r4
	shiftl r3 r4 r4 				; Bitmask (r4)

	;send high or low based on bit
	and r4 r1 r2					; Bitmask result (r2)

	beq r0 r2 LCDdoShiftLo
	jump LCDskipShiftLo
	LCDdoShiftLo:
		savpc r15
		push r15
		jump LCDshiftLow 			; does not use registers
	LCDskipShiftLo:


	bne r0 r2 LCDdoShiftHi
	jump LCDskipShiftHi
	LCDdoShiftHi:
		savpc r15
		push r15
		jump LCDshiftHigh			; does not use registers
	LCDskipShiftHi:

	beq r0 r3 LCDdoneSending		; When r3 reached 0, we have sent all bits

	sub 1 r3 r3 					; Sub r3 by one
	jump LCDsendBits 				; Send next bit

	LCDdoneSending:

	;stop SPI transmission
	savpc r15
	push r15
	jump LCDdisableChip 			; does not use registers
	
	;return
	pop r15
	jump 3 r15



; enable device
; does not use registers
LCDenableChip:
	and 0b11111101 r14 r14		; set cs low

	;return
	pop r15
	jump 3 r15


; set data low and disable device
; does not use registers
LCDdisableChip:
	and 0b11110111 r14 r14		; set dat low
	or  0b00000010 r14 r14		; set cs high

	;return
	pop r15
	jump 3 r15


; clock high bit
; does not use registers
LCDshiftHigh:
	or  0b00001000 r14 r14		; set dat high
	or  0b00010000 r14 r14		; set clk high
	and 0b11101111 r14 r14		; set clk low
	
	;return
	pop r15
	jump 3 r15

; clock low bit
; does not use registers
LCDshiftLow:
	and 0b11110111 r14 r14		; set dat high
	or  0b00010000 r14 r14		; set clk high
	and 0b11101111 r14 r14		; set clk low
	
	;return
	pop r15
	jump 3 r15


Int1:						; Interrupt1 handler
	reti 					; Return from interrupt

Int2:						; Interrupt2 handler
	reti 					; Return from interrupt

Int3:						; Interrupt3 handler
	reti 					; Return from interrupt

Int4:						; Interrupt4 handler, Vsync interrupt
	reti 					; Return from interrupt


; ascii table. First data is ascii value 20
; each character is two words long
LCDASCIItable:
.db 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
.db 0x00 0x00 0x5f 0x00 0x00 0x00 0x00 0x00
.db 0x00 0x07 0x00 0x07 0x00 0x00 0x00 0x00
.db 0x14 0x7f 0x14 0x7f 0x00 0x00 0x14 0x00
.db 0x24 0x2a 0x7f 0x2a 0x00 0x00 0x12 0x00
.db 0x23 0x13 0x08 0x64 0x00 0x00 0x62 0x00
.db 0x36 0x49 0x55 0x22 0x00 0x00 0x50 0x00
.db 0x00 0x05 0x03 0x00 0x00 0x00 0x00 0x00
.db 0x00 0x1c 0x22 0x41 0x00 0x00 0x00 0x00
.db 0x00 0x41 0x22 0x1c 0x00 0x00 0x00 0x00
.db 0x14 0x08 0x3e 0x08 0x00 0x00 0x14 0x00
.db 0x08 0x08 0x3e 0x08 0x00 0x00 0x08 0x00
.db 0x00 0x50 0x30 0x00 0x00 0x00 0x00 0x00
.db 0x08 0x08 0x08 0x08 0x00 0x00 0x08 0x00
.db 0x00 0x60 0x60 0x00 0x00 0x00 0x00 0x00
.db 0x20 0x10 0x08 0x04 0x00 0x00 0x02 0x00
.db 0x3e 0x51 0x49 0x45 0x00 0x00 0x3e 0x00
.db 0x00 0x42 0x7f 0x40 0x00 0x00 0x00 0x00
.db 0x42 0x61 0x51 0x49 0x00 0x00 0x46 0x00
.db 0x21 0x41 0x45 0x4b 0x00 0x00 0x31 0x00
.db 0x18 0x14 0x12 0x7f 0x00 0x00 0x10 0x00
.db 0x27 0x45 0x45 0x45 0x00 0x00 0x39 0x00
.db 0x3c 0x4a 0x49 0x49 0x00 0x00 0x30 0x00
.db 0x01 0x71 0x09 0x05 0x00 0x00 0x03 0x00
.db 0x36 0x49 0x49 0x49 0x00 0x00 0x36 0x00
.db 0x06 0x49 0x49 0x29 0x00 0x00 0x1e 0x00
.db 0x00 0x36 0x36 0x00 0x00 0x00 0x00 0x00
.db 0x00 0x56 0x36 0x00 0x00 0x00 0x00 0x00
.db 0x08 0x14 0x22 0x41 0x00 0x00 0x00 0x00
.db 0x14 0x14 0x14 0x14 0x00 0x00 0x14 0x00
.db 0x00 0x41 0x22 0x14 0x00 0x00 0x08 0x00
.db 0x02 0x01 0x51 0x09 0x00 0x00 0x06 0x00
.db 0x32 0x49 0x79 0x41 0x00 0x00 0x3e 0x00
.db 0x7e 0x11 0x11 0x11 0x00 0x00 0x7e 0x00
.db 0x7f 0x49 0x49 0x49 0x00 0x00 0x36 0x00
.db 0x3e 0x41 0x41 0x41 0x00 0x00 0x22 0x00
.db 0x7f 0x41 0x41 0x22 0x00 0x00 0x1c 0x00
.db 0x7f 0x49 0x49 0x49 0x00 0x00 0x41 0x00
.db 0x7f 0x09 0x09 0x09 0x00 0x00 0x01 0x00
.db 0x3e 0x41 0x49 0x49 0x00 0x00 0x7a 0x00
.db 0x7f 0x08 0x08 0x08 0x00 0x00 0x7f 0x00
.db 0x00 0x41 0x7f 0x41 0x00 0x00 0x00 0x00
.db 0x20 0x40 0x41 0x3f 0x00 0x00 0x01 0x00
.db 0x7f 0x08 0x14 0x22 0x00 0x00 0x41 0x00
.db 0x7f 0x40 0x40 0x40 0x00 0x00 0x40 0x00
.db 0x7f 0x02 0x0c 0x02 0x00 0x00 0x7f 0x00
.db 0x7f 0x04 0x08 0x10 0x00 0x00 0x7f 0x00
.db 0x3e 0x41 0x41 0x41 0x00 0x00 0x3e 0x00
.db 0x7f 0x09 0x09 0x09 0x00 0x00 0x06 0x00
.db 0x3e 0x41 0x51 0x21 0x00 0x00 0x5e 0x00
.db 0x7f 0x09 0x19 0x29 0x00 0x00 0x46 0x00
.db 0x46 0x49 0x49 0x49 0x00 0x00 0x31 0x00
.db 0x01 0x01 0x7f 0x01 0x00 0x00 0x01 0x00
.db 0x3f 0x40 0x40 0x40 0x00 0x00 0x3f 0x00
.db 0x1f 0x20 0x40 0x20 0x00 0x00 0x1f 0x00
.db 0x3f 0x40 0x38 0x40 0x00 0x00 0x3f 0x00
.db 0x63 0x14 0x08 0x14 0x00 0x00 0x63 0x00
.db 0x07 0x08 0x70 0x08 0x00 0x00 0x07 0x00
.db 0x61 0x51 0x49 0x45 0x00 0x00 0x43 0x00
.db 0x00 0x7f 0x41 0x41 0x00 0x00 0x00 0x00
.db 0x02 0x04 0x08 0x10 0x00 0x00 0x20 0x00
.db 0x00 0x41 0x41 0x7f 0x00 0x00 0x00 0x00
.db 0x04 0x02 0x01 0x02 0x00 0x00 0x04 0x00
.db 0x40 0x40 0x40 0x40 0x00 0x00 0x40 0x00
.db 0x00 0x01 0x02 0x04 0x00 0x00 0x00 0x00
.db 0x20 0x54 0x54 0x54 0x00 0x00 0x78 0x00
.db 0x7f 0x48 0x44 0x44 0x00 0x00 0x38 0x00
.db 0x38 0x44 0x44 0x44 0x00 0x00 0x20 0x00
.db 0x38 0x44 0x44 0x48 0x00 0x00 0x7f 0x00
.db 0x38 0x54 0x54 0x54 0x00 0x00 0x18 0x00
.db 0x08 0x7e 0x09 0x01 0x00 0x00 0x02 0x00
.db 0x0c 0x52 0x52 0x52 0x00 0x00 0x3e 0x00
.db 0x7f 0x08 0x04 0x04 0x00 0x00 0x78 0x00
.db 0x00 0x44 0x7d 0x40 0x00 0x00 0x00 0x00
.db 0x20 0x40 0x44 0x3d 0x00 0x00 0x00 0x00
.db 0x7f 0x10 0x28 0x44 0x00 0x00 0x00 0x00
.db 0x00 0x41 0x7f 0x40 0x00 0x00 0x00 0x00
.db 0x7c 0x04 0x18 0x04 0x00 0x00 0x78 0x00
.db 0x7c 0x08 0x04 0x04 0x00 0x00 0x78 0x00
.db 0x38 0x44 0x44 0x44 0x00 0x00 0x38 0x00
.db 0x7c 0x14 0x14 0x14 0x00 0x00 0x08 0x00
.db 0x08 0x14 0x14 0x18 0x00 0x00 0x7c 0x00
.db 0x7c 0x08 0x04 0x04 0x00 0x00 0x08 0x00
.db 0x48 0x54 0x54 0x54 0x00 0x00 0x20 0x00
.db 0x04 0x3f 0x44 0x40 0x00 0x00 0x20 0x00
.db 0x3c 0x40 0x40 0x20 0x00 0x00 0x7c 0x00
.db 0x1c 0x20 0x40 0x20 0x00 0x00 0x1c 0x00
.db 0x3c 0x40 0x30 0x40 0x00 0x00 0x3c 0x00
.db 0x44 0x28 0x10 0x28 0x00 0x00 0x44 0x00
.db 0x0c 0x50 0x50 0x50 0x00 0x00 0x3c 0x00
.db 0x44 0x64 0x54 0x4c 0x00 0x00 0x44 0x00
.db 0x00 0x08 0x36 0x41 0x00 0x00 0x00 0x00
.db 0x00 0x00 0x7f 0x00 0x00 0x00 0x00 0x00
.db 0x00 0x41 0x36 0x08 0x00 0x00 0x00 0x00
.db 0x10 0x08 0x08 0x10 0x00 0x00 0x08 0x00
.db 0x78 0x46 0x41 0x46 0x00 0x00 0x78 0x00