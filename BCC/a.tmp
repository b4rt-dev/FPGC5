.code
; Setup stack and return function before jumping to Main of C program
Main:
    load32 0 r14            ; initialize base pointer address
    load32 0x77FFFF r13     ; initialize main stack address
    addr2reg Return_UART r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump main               ; jump to main of C program
                            ; should return to the address in r15
    halt                    ; should not get here

; Function that is called after Main of C program has returned
; Return value should be in R1
; Send it over UART and halt afterwards
Return_UART:
    load32 0xC02723 r1          ; r1 = 0xC02723 | UART tx
    write 0 r1 r2               ; write r2 over UART
    halt                        ; halt

; COMPILED C CODE HERE

 ; glb UserprogramRunning : char
.data
; .globl UserprogramRunning
UserprogramRunning:
 ; =
 ; RPN'ized expression: "0 "
 ; Expanded expression: "0 "
 ; Expression value: 0
 .dw 0

 ; glb BDOS_Backup : () void
 ; glb BDOS_Restore : () void
 ; glb MATH_divmod : (
 ; prm     dividend : int
 ; prm     divisor : int
 ; prm     rem : * int
 ;     ) int
.code
; .globl MATH_divmod
MATH_divmod:
 write 0 r13 r4
 write 4 r13 r5
 write 8 r13 r6
 sub r13         24 r13
 write         16 r13 r14
 add r13         16 r14
   write 4 r14 r15
 ; loc     dividend : (@8) : int
 ; loc     divisor : (@12) : int
 ; loc     rem : (@16) : * int
 ; loc     quotient : (@-4) : int
 ; RPN'ized expression: "quotient 1 = "
 ; Expanded expression: "(@-4) 1 =(4) "
 ; 1
 load32 1 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; loc     neg : (@-8) : int
 ; RPN'ized expression: "neg 1 = "
 ; Expanded expression: "(@-8) 1 =(4) "
 ; 1
 load32 1 r2
 ; local ofs
 ; = (write dereference)
 write -8 r14 r2
 ; if
 ; RPN'ized expression: "dividend 0 > divisor 0 < && dividend 0 < divisor 0 > && || "
 ; Expanded expression: "(@8) *(4) 0 > [sh&&->6] (@12) *(4) 0 < &&[6] _Bool [sh||->4] (@8) *(4) 0 < [sh&&->5] (@12) *(4) 0 > &&[5] _Bool ||[4] "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 0
 ; >
 bges r0 r2 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit &&
 ; JumpIfZero
 bne r2 r0 2
 jump Label_6
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; 0
 ; <
 bges r2 r0 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit && target
Label_6:
 ; _Bool
 bgts r2 r0 3
 load32 0 r2
 jumpo 2
 load32 1 r2
 ; short-circuit ||
 ; JumpIfNotZero
 beq r2 r0 2
 jump Label_4
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 0
 ; <
 bges r2 r0 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit &&
 ; JumpIfZero
 bne r2 r0 2
 jump Label_5
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; 0
 ; >
 bges r0 r2 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit && target
Label_5:
 ; _Bool
 bgts r2 r0 3
 load32 0 r2
 jumpo 2
 load32 1 r2
 ; short-circuit || target
Label_4:
 ; JumpIfZero
 bne r2 r0 2
 jump Label_2
 ; RPN'ized expression: "neg 1 -u = "
 ; Expanded expression: "(@-8) -1 =(4) "
 ; -1
 load32 -1 r2
 ; local ofs
 ; = (write dereference)
 write -8 r14 r2
Label_2:
 ; loc     tempdividend : (@-12) : int
 ; RPN'ized expression: "tempdividend dividend 0 < dividend dividend -u ? = "
 ; Expanded expression: "(@-12) (@8) *(4) 0 < [sh||->7] (@8) *(4) goto &&[7] (@8) *(4) -u &&[8] =(4) "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 0
 ; <
 bges r2 r0 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit ||
 ; JumpIfNotZero
 beq r2 r0 2
 jump Label_7
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; sh-circ-goto goto
 jump Label_8
 ; short-circuit && target
Label_7:
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; -u
 sub r0 r2 r2
 ; short-circuit && target
Label_8:
 ; local ofs
 ; = (write dereference)
 write -12 r14 r2
 ; loc     tempdivisor : (@-16) : int
 ; RPN'ized expression: "tempdivisor divisor 0 < divisor divisor -u ? = "
 ; Expanded expression: "(@-16) (@12) *(4) 0 < [sh||->9] (@12) *(4) goto &&[9] (@12) *(4) -u &&[10] =(4) "
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; 0
 ; <
 bges r2 r0 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 ; short-circuit ||
 ; JumpIfNotZero
 beq r2 r0 2
 jump Label_9
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; sh-circ-goto goto
 jump Label_10
 ; short-circuit && target
Label_9:
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; -u
 sub r0 r2 r2
 ; short-circuit && target
Label_10:
 ; local ofs
 ; = (write dereference)
 write -16 r14 r2
 ; if
 ; RPN'ized expression: "tempdivisor tempdividend == "
 ; Expanded expression: "(@-16) *(4) (@-12) *(4) == "
 ; local ofs
 ; * (read dereference)
 read -16 r14 r2
 ; local ofs
 ; * (read dereference)
 read -12 r14 r8
 ; ==
 beq r2 r8 2
 jump Label_11
 ; {
 ; RPN'ized expression: "rem *u 0 = "
 ; Expanded expression: "(@16) *(4) 0 =(4) "
 ; local ofs
 ; * (read dereference)
 read 16 r14 r2
 ; 0
 ; =
 write 0 r2 r0
 ; return
 ; RPN'ized expression: "1 neg * "
 ; Expanded expression: "1 (@-8) *(4) * "
 ; local ofs
 ; * (read dereference)
 read -8 r14 r2
 ; 0
 ; <<
 shiftl r2 0 r2
 jump Label_1
 ; }
 jump Label_12
Label_11:
 ; else
 ; if
 ; RPN'ized expression: "tempdividend tempdivisor < "
 ; Expanded expression: "(@-12) *(4) (@-16) *(4) < "
 ; local ofs
 ; * (read dereference)
 read -12 r14 r2
 ; local ofs
 ; * (read dereference)
 read -16 r14 r8
 ; <
 bges r2 r8 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 bne r2 r0 2
 jump Label_13
 ; {
 ; if
 ; RPN'ized expression: "dividend 0 < "
 ; Expanded expression: "(@8) *(4) 0 < "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 0
 ; <
 bgts r0 r2 2
 jump Label_15
 ; RPN'ized expression: "rem *u tempdividend neg * = "
 ; Expanded expression: "(@16) *(4) (@-12) *(4) (@-8) *(4) * =(4) "
 ; local ofs
 ; * (read dereference)
 read 16 r14 r2
 ; local ofs
 ; * (read dereference)
 read -12 r14 r8
 ; local ofs
 ; * (read dereference)
 read -8 r14 r9
 ; *
 mult r8 r9 r8
 ; = (write dereference)
 write 0 r2 r8
 or r0 r8 r2
 jump Label_16
Label_15:
 ; else
 ; RPN'ized expression: "rem *u tempdividend = "
 ; Expanded expression: "(@16) *(4) (@-12) *(4) =(4) "
 ; local ofs
 ; * (read dereference)
 read 16 r14 r2
 ; local ofs
 ; * (read dereference)
 read -12 r14 r8
 ; = (write dereference)
 write 0 r2 r8
 or r0 r8 r2
Label_16:
 ; return
 ; RPN'ized expression: "0 "
 ; Expanded expression: "0 "
 ; Expression value: 0
 ; 0
 load32 0 r2
 jump Label_1
 ; }
Label_13:
Label_12:
 ; while
 ; RPN'ized expression: "tempdivisor 1 << tempdividend <= "
 ; Expanded expression: "(@-16) *(4) 1 << (@-12) *(4) <= "
Label_17:
 ; local ofs
 ; * (read dereference)
 read -16 r14 r2
 ; 1
 ; <<
 shiftl r2 1 r2
 ; local ofs
 ; * (read dereference)
 read -12 r14 r8
 ; <=
 bges r8 r2 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 beq r2 r0 2
 jump Label_18
 ; {
 ; RPN'ized expression: "tempdivisor tempdivisor 1 << = "
 ; Expanded expression: "(@-16) (@-16) *(4) 1 << =(4) "
 ; local ofs
 ; * (read dereference)
 read -16 r14 r2
 ; 1
 ; <<
 shiftl r2 1 r2
 ; local ofs
 ; = (write dereference)
 write -16 r14 r2
 ; RPN'ized expression: "quotient quotient 1 << = "
 ; Expanded expression: "(@-4) (@-4) *(4) 1 << =(4) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; 1
 ; <<
 shiftl r2 1 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; }
 jump Label_17
Label_18:
 ; if
 ; RPN'ized expression: "dividend 0 < "
 ; Expanded expression: "(@8) *(4) 0 < "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 0
 ; <
 bgts r0 r2 2
 jump Label_19
 ; RPN'ized expression: "quotient quotient neg * ( rem , divisor , tempdividend tempdivisor - -u MATH_divmod ) + = "
 ; Expanded expression: "(@-4) (@-4) *(4) (@-8) *(4) *  (@16) *(4)  (@12) *(4)  (@-12) *(4) (@-16) *(4) - -u  MATH_divmod ()12 + =(4) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; local ofs
 sub r13 4 r13
 write 0 r13 r2
 ; * (read dereference)
 read -8 r14 r2
 ; *
 read 0 r13 r11
 add r13 4 r13
 mult r11 r2 r2
 ; (
 sub r13 4 r13
 write 0 r13 r2
 ; local ofs
 ; * (read dereference)
 read 16 r14 r6
 ; ,
 ; local ofs
 ; * (read dereference)
 read 12 r14 r5
 ; ,
 ; local ofs
 ; * (read dereference)
 read -12 r14 r4
 ; local ofs
 sub r13 4 r13
 write 0 r13 r4
 ; * (read dereference)
 read -16 r14 r4
 ; -
 read 0 r13 r11
 add r13 4 r13
 sub r11 r4 r4
 ; -u
 sub r0 r4 r4
 ; ,
 ; MATH_divmod
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump MATH_divmod
 add r13 16 r13
 ; +
 read 0 r13 r11
 add r13 4 r13
 add r11 r2 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 jump Label_20
Label_19:
 ; else
 ; RPN'ized expression: "quotient quotient neg * ( rem , divisor , tempdividend tempdivisor - MATH_divmod ) + = "
 ; Expanded expression: "(@-4) (@-4) *(4) (@-8) *(4) *  (@16) *(4)  (@12) *(4)  (@-12) *(4) (@-16) *(4) -  MATH_divmod ()12 + =(4) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; local ofs
 sub r13 4 r13
 write 0 r13 r2
 ; * (read dereference)
 read -8 r14 r2
 ; *
 read 0 r13 r11
 add r13 4 r13
 mult r11 r2 r2
 ; (
 sub r13 4 r13
 write 0 r13 r2
 ; local ofs
 ; * (read dereference)
 read 16 r14 r6
 ; ,
 ; local ofs
 ; * (read dereference)
 read 12 r14 r5
 ; ,
 ; local ofs
 ; * (read dereference)
 read -12 r14 r4
 ; local ofs
 sub r13 4 r13
 write 0 r13 r4
 ; * (read dereference)
 read -16 r14 r4
 ; -
 read 0 r13 r11
 add r13 4 r13
 sub r11 r4 r4
 ; ,
 ; MATH_divmod
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump MATH_divmod
 add r13 16 r13
 ; +
 read 0 r13 r11
 add r13 4 r13
 add r11 r2 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
Label_20:
 ; return
 ; RPN'ized expression: "quotient "
 ; Expanded expression: "(@-4) *(4) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
Label_1:
 read 4 r14 r15
 read 0 r14 r14
 add r13 24 r13
 jumpr 0 r15

 ; glb MATH_div : (
 ; prm     dividend : int
 ; prm     divisor : int
 ;     ) int
.code
; .globl MATH_div
MATH_div:
 write 0 r13 r4
 write 4 r13 r5
 sub r13         12 r13
 write          4 r13 r14
 add r13          4 r14
   write 4 r14 r15
 ; loc     dividend : (@8) : int
 ; loc     divisor : (@12) : int
 ; loc     rem : (@-4) : int
 ; RPN'ized expression: "rem 0 = "
 ; Expanded expression: "(@-4) 0 =(4) "
 ; 0
 ; local ofs
 ; =
 write -4 r14 r0
 ; return
 ; RPN'ized expression: "( rem &u , divisor , dividend MATH_divmod ) "
 ; Expanded expression: " (@-4)  (@12) *(4)  (@8) *(4)  MATH_divmod ()12 "
 ; (
 ; local ofs
 sub r14 4 r6
 ; ,
 ; local ofs
 ; * (read dereference)
 read 12 r14 r5
 ; ,
 ; local ofs
 ; * (read dereference)
 read 8 r14 r4
 ; ,
 ; MATH_divmod
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump MATH_divmod
 add r13 16 r13
Label_21:
 read 4 r14 r15
 read 0 r14 r14
 add r13 12 r13
 jumpr 0 r15

 ; glb MATH_mod : (
 ; prm     dividend : int
 ; prm     divisor : int
 ;     ) int
.code
; .globl MATH_mod
MATH_mod:
 write 0 r13 r4
 write 4 r13 r5
 sub r13         12 r13
 write          4 r13 r14
 add r13          4 r14
   write 4 r14 r15
 ; loc     dividend : (@8) : int
 ; loc     divisor : (@12) : int
 ; loc     rem : (@-4) : int
 ; RPN'ized expression: "rem 0 = "
 ; Expanded expression: "(@-4) 0 =(4) "
 ; 0
 ; local ofs
 ; =
 write -4 r14 r0
 ; RPN'ized expression: "( rem &u , divisor , dividend MATH_divmod ) "
 ; Expanded expression: " (@-4)  (@12) *(4)  (@8) *(4)  MATH_divmod ()12 "
 ; (
 ; local ofs
 sub r14 4 r6
 ; ,
 ; local ofs
 ; * (read dereference)
 read 12 r14 r5
 ; ,
 ; local ofs
 ; * (read dereference)
 read 8 r14 r4
 ; ,
 ; MATH_divmod
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump MATH_divmod
 add r13 16 r13
 ; return
 ; RPN'ized expression: "rem "
 ; Expanded expression: "(@-4) *(4) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
Label_22:
 read 4 r14 r15
 read 0 r14 r14
 add r13 12 r13
 jumpr 0 r15

 ; glb GFX_cursor : char
.data
; .globl GFX_cursor
GFX_cursor:
 ; =
 ; RPN'ized expression: "0 "
 ; Expanded expression: "0 "
 ; Expression value: 0
 .dw 0

 ; glb GFX_asmDefines : () void
.code
; .globl GFX_asmDefines
GFX_asmDefines:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
define GFX_PATTERN_TABLE_SIZE       = 1024      ; size of pattern table
define GFX_PALETTE_TABLE_SIZE       = 32        ; size of palette table
define GFX_WINDOW_TILES             = 1920      ; number of tiles in window plane
define GFX_BG_TILES                 = 2048      ; number of tiles in bg plane
define GFX_SPRITES                  = 64        ; number of sprites in spriteVRAM
define DATAOFFSET_TO_VOID           = 0         ; offset to assembly data when placed in void

Label_23:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_printWindowColored : (
 ; prm     addr : char
 ; prm     len : char
 ; prm     pos : char
 ; prm     palette : char
 ;     ) void
.code
; .globl GFX_printWindowColored
GFX_printWindowColored:
 write 0 r13 r4
 write 4 r13 r5
 write 8 r13 r6
 write 12 r13 r7
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     addr : (@8) : char
 ; loc     len : (@12) : char
 ; loc     pos : (@16) : char
 ; loc     palette : (@20) : char
; backup registers
push r1
push r2
push r3
push r4
push r5
push r6
push r7
push r8
push r9
push r10
; Fix to map ShivyC reg layout to BCC
or r7 r0 r2
or r6 r0 r3
or r5 r0 r1
or r4 r0 r5
or r1 r0 r4


; vram address
load32 0xC01420 r10             ; r10 = vram addr 1056+4096 0xC01420

; loop variables
load 0 r1                       ; r1 = loopvar
or r10 r0 r6                    ; r6 = vram addr with offset
or r5 r0 r7                     ; r7 = data addr with offset

add r3 r6 r6                    ; apply offset from r3

; copy loop
GFX_printWindowColoredLoop:
    read 0 r7 r9            ; read 32 bits
    write 0 r6 r9           ; write char to vram
    write 2048 r6 r2        ; write palette index to vram
    add r6 1 r6             ; incr vram address
    add r7 1 r7             ; incr data address
    add r1 1 r1             ; incr counter
    bge r1 r4 2             ; keep looping until all data is copied
    jump GFX_printWindowColoredLoop


; restore registers
pop r10
pop r9
pop r8
pop r7
pop r6
pop r5
pop r4
pop r3
pop r2
pop r1

Label_24:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_printBGColored : (
 ; prm     addr : char
 ; prm     len : char
 ; prm     pos : char
 ; prm     palette : char
 ;     ) void
.code
; .globl GFX_printBGColored
GFX_printBGColored:
 write 0 r13 r4
 write 4 r13 r5
 write 8 r13 r6
 write 12 r13 r7
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     addr : (@8) : char
 ; loc     len : (@12) : char
 ; loc     pos : (@16) : char
 ; loc     palette : (@20) : char
; backup registers
push r1
push r2
push r3
push r4
push r5
push r6
push r7
push r8
push r9
push r10
; Fix to map ShivyC reg layout to BCC
or r7 r0 r2
or r6 r0 r3
or r5 r0 r1
or r4 r0 r5
or r1 r0 r4


; vram address
load32 0xC00420 r10             ; r10 = vram addr 1056 0xC00420

; loop variables
load 0 r1                       ; r1 = loopvar
or r10 r0 r6                    ; r6 = vram addr with offset
or r5 r0 r7                     ; r7 = data addr with offset

add r3 r6 r6                    ; apply offset from r3

; copy loop
GFX_printBGColoredLoop:
    read 0 r7 r9            ; read 32 bits
    write 0 r6 r9           ; write char to vram
    write 2048 r6 r2        ; write palette index to vram
    add r6 1 r6             ; incr vram address
    add r7 1 r7             ; incr data address
    add r1 1 r1             ; incr counter
    bge r1 r4 2             ; keep looping until all data is copied
    jump GFX_printBGColoredLoop


; restore registers
pop r10
pop r9
pop r8
pop r7
pop r6
pop r5
pop r4
pop r3
pop r2
pop r1

Label_25:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_copyPatternTable : (
 ; prm     addr : char
 ;     ) void
.code
; .globl GFX_copyPatternTable
GFX_copyPatternTable:
 write 0 r13 r4
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     addr : (@8) : char
; backup registers
push r2
push r3
push r4
push r5
push r1
push r6
or r4 r0 r5

; vram address
load32 0xC00000 r2              ; r2 = vram addr 0 0xC00000

; loop variables
load 0 r3                       ; r3 = loopvar
load GFX_PATTERN_TABLE_SIZE r4  ; r4 = loopmax
or r2 r0 r1                     ; r1 = vram addr with offset
add r5 DATAOFFSET_TO_VOID r6                     ; r6 = ascii addr with offset

; copy loop
GFX_initPatternTableLoop:
    copy 0 r6 r1            ; copy ascii to vram
    add r1 1 r1             ; incr vram address
    add r6 1 r6             ; incr ascii address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all data is copied
    jump GFX_initPatternTableLoop

; restore registers
pop r6
pop r1
pop r5
pop r4
pop r3
pop r2

Label_26:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_copyPaletteTable : (
 ; prm     addr : char
 ;     ) void
.code
; .globl GFX_copyPaletteTable
GFX_copyPaletteTable:
 write 0 r13 r4
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     addr : (@8) : char
; backup registers
push r2
push r3
push r4
push r5
push r1
push r6
or r4 r0 r5

; vram address
load32 0xC00400 r2          ; r2 = vram addr 1024 0xC00400

; loop variables
load 0 r3                       ; r3 = loopvar
load GFX_PALETTE_TABLE_SIZE r4  ; r4 = loopmax
or r2 r0 r1                     ; r1 = vram addr with offset
add r5 DATAOFFSET_TO_VOID r6                     ; r6 = palette addr with offset

; copy loop
GFX_initPaletteTableLoop:
    copy 0 r6 r1            ; copy palette to vram
    add r1 1 r1             ; incr vram address
    add r6 1 r6             ; incr palette address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all data is copied
    jump GFX_initPaletteTableLoop

; restore registers
pop r6
pop r1
pop r5
pop r4
pop r3
pop r2

Label_27:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearBGtileTable : () void
.code
; .globl GFX_clearBGtileTable
GFX_clearBGtileTable:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1
push r2
push r3
push r4
push r5

; vram address
load32 0xC00420 r1        ; r1 = vram addr 1056 0xC00420

; loop variables
load 0 r3                   ; r3 = loopvar
load GFX_BG_TILES r4        ; r4 = loopmax
or r1 r0 r5                 ; r5 = vram addr with offset

; copy loop
GFX_clearBGtileTableLoop:
    write 0 r5 r0           ; clear tile
    add r5 1 r5             ; incr vram address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all tiles are cleared
    jump GFX_clearBGtileTableLoop

; restore registers
pop r5
pop r4
pop r3
pop r2
pop r1

Label_28:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearBGpaletteTable : () void
.code
; .globl GFX_clearBGpaletteTable
GFX_clearBGpaletteTable:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1
push r2
push r3
push r4
push r5

; vram address
load32 0xC00C20 r1        ; r1 = vram addr 1056+2048 0xC00C20

; loop variables
load 0 r3                   ; r3 = loopvar
load GFX_BG_TILES r4        ; r4 = loopmax
or r1 r0 r5                 ; r5 = vram addr with offset

; copy loop
GFX_clearBGpaletteTableLoop:
    write 0 r5 r0           ; clear tile
    add r5 1 r5             ; incr vram address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all tiles are cleared
    jump GFX_clearBGpaletteTableLoop

; restore registers
pop r5
pop r4
pop r3
pop r2
pop r1

Label_29:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearWindowtileTable : () void
.code
; .globl GFX_clearWindowtileTable
GFX_clearWindowtileTable:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1
push r2
push r3
push r4
push r5

; vram address
load32 0xC01420 r1        ; r1 = vram addr 1056+2048 0xC01420

; loop variables
load 0 r3                   ; r3 = loopvar
load GFX_WINDOW_TILES r4    ; r4 = loopmax
or r1 r0 r5                 ; r5 = vram addr with offset

; copy loop
GFX_clearWindowtileTableLoop:
    write 0 r5 r0           ; clear tile
    add r5 1 r5             ; incr vram address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all tiles are cleared
    jump GFX_clearWindowtileTableLoop

; restore registers
pop r5
pop r4
pop r3
pop r2
pop r1

Label_30:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearWindowpaletteTable : () void
.code
; .globl GFX_clearWindowpaletteTable
GFX_clearWindowpaletteTable:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1
push r2
push r3
push r4
push r5

; vram address
load32 0xC01C20 r1        ; r1 = vram addr 1056+2048 0xC01C20

; loop variables
load 0 r3                   ; r3 = loopvar
load GFX_WINDOW_TILES r4    ; r4 = loopmax
or r1 r0 r5                 ; r5 = vram addr with offset

; copy loop
GFX_clearWindowpaletteTableLoop:
    write 0 r5 r0           ; clear tile
    add r5 1 r5             ; incr vram address
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all tiles are cleared
    jump GFX_clearWindowpaletteTableLoop

; restore registers
pop r5
pop r4
pop r3
pop r2
pop r1

Label_31:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearSprites : () void
.code
; .globl GFX_clearSprites
GFX_clearSprites:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1
push r2
push r3
push r4
push r5

; vram address
load32 0xC02422 r1        ; r1 = vram addr 0xC02422

; loop variables
load 0 r3               ; r3 = loopvar
load GFX_SPRITES r4     ; r4 = loopmax
or r1 r0 r5             ; r5 = vram addr with offset

; copy loop
GFX_clearSpritesLoop:
    write 0 r5 r0           ; clear x
    write 1 r5 r0           ; clear y
    write 2 r5 r0           ; clear tile
    write 3 r5 r0           ; clear color+attrib
    add r5 4 r5             ; incr vram address by 4
    add r3 1 r3             ; incr counter
    beq r3 r4 2             ; keep looping until all tiles are cleared
    jump GFX_clearSpritesLoop

; restore registers
pop r5
pop r4
pop r3
pop r2
pop r1

Label_32:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_clearParameters : () void
.code
; .globl GFX_clearParameters
GFX_clearParameters:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
; backup registers
push r1

; vram address
load32 0xC02420 r1      ; r1 = vram addr 0xC02420

write 0 r1 r0           ; clear tile scroll
write 1 r1 r0           ; clear fine scroll

; restore registers
pop r1

Label_33:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_initVram : () void
.code
; .globl GFX_initVram
GFX_initVram:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
   write 4 r14 r15
 ; RPN'ized expression: "( GFX_clearBGtileTable ) "
 ; Expanded expression: " GFX_clearBGtileTable ()0 "
 ; (
 ; GFX_clearBGtileTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearBGtileTable
 add r13 16 r13
 ; RPN'ized expression: "( GFX_clearBGpaletteTable ) "
 ; Expanded expression: " GFX_clearBGpaletteTable ()0 "
 ; (
 ; GFX_clearBGpaletteTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearBGpaletteTable
 add r13 16 r13
 ; RPN'ized expression: "( GFX_clearWindowtileTable ) "
 ; Expanded expression: " GFX_clearWindowtileTable ()0 "
 ; (
 ; GFX_clearWindowtileTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearWindowtileTable
 add r13 16 r13
 ; RPN'ized expression: "( GFX_clearWindowpaletteTable ) "
 ; Expanded expression: " GFX_clearWindowpaletteTable ()0 "
 ; (
 ; GFX_clearWindowpaletteTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearWindowpaletteTable
 add r13 16 r13
 ; RPN'ized expression: "( GFX_clearSprites ) "
 ; Expanded expression: " GFX_clearSprites ()0 "
 ; (
 ; GFX_clearSprites
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearSprites
 add r13 16 r13
 ; RPN'ized expression: "( GFX_clearParameters ) "
 ; Expanded expression: " GFX_clearParameters ()0 "
 ; (
 ; GFX_clearParameters
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_clearParameters
 add r13 16 r13
Label_34:
 read 4 r14 r15
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_WindowPosFromXY : (
 ; prm     x : char
 ; prm     y : char
 ;     ) char
.code
; .globl GFX_WindowPosFromXY
GFX_WindowPosFromXY:
 write 0 r13 r4
 write 4 r13 r5
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     x : (@8) : char
 ; loc     y : (@12) : char
 ; return
 ; RPN'ized expression: "y 40 * x + "
 ; Expanded expression: "(@12) *(-1) 40 * (@8) *(-1) + "
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; 40
 load32 40 r8
 ; *
 mult r2 r8 r2
 ; local ofs
 ; * (read dereference)
 read 8 r14 r8
 ; +
 add r2 r8 r2
 ; signed char
Label_35:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_BackgroundPosFromXY : (
 ; prm     x : char
 ; prm     y : char
 ;     ) char
.code
; .globl GFX_BackgroundPosFromXY
GFX_BackgroundPosFromXY:
 write 0 r13 r4
 write 4 r13 r5
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
 ; loc     x : (@8) : char
 ; loc     y : (@12) : char
 ; return
 ; RPN'ized expression: "y 64 * x + "
 ; Expanded expression: "(@12) *(-1) 64 * (@8) *(-1) + "
 ; local ofs
 ; * (read dereference)
 read 12 r14 r2
 ; 6
 ; <<
 shiftl r2 6 r2
 ; local ofs
 ; * (read dereference)
 read 8 r14 r8
 ; +
 add r2 r8 r2
 ; signed char
Label_36:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb GFX_ScrollUp : () void
.code
; .globl GFX_ScrollUp
GFX_ScrollUp:
 sub r13         16 r13
 write          8 r13 r14
 add r13          8 r14
 ; write 4 r14 r15
 ; loc     v : (@-4) : * char
 ; loc     <something> : * char
 ; RPN'ized expression: "v 12588064 (something38) = "
 ; Expanded expression: "(@-4) 12588064 =(4) "
 ; 12588064
 load32 12588064 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; loc     i : (@-8) : char
 ; for
 ; RPN'ized expression: "i 0 = "
 ; Expanded expression: "(@-8) 0 =(-1) "
 ; 0
 ; local ofs
 ; =
 write -8 r14 r0
Label_39:
 ; RPN'ized expression: "i 960 < "
 ; Expanded expression: "(@-8) *(-1) 960 < "
 ; local ofs
 ; * (read dereference)
 read -8 r14 r2
 ; 960
 ; <
 load32 960 r11
 bges r2 r11 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 bne r2 r0 2
 jump Label_42
 ; RPN'ized expression: "i ++p "
 ; Expanded expression: "(@-8) ++p(-1) "
 ; {
 ; RPN'ized expression: "v *u v 40 + *u = "
 ; Expanded expression: "(@-4) *(4) (@-4) *(4) 40 + *(-1) =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; local ofs
 ; * (read dereference)
 read -4 r14 r8
 ; 40
 ; +
 add r8 40 r8
 ; * (read dereference)
 read 0 r8 r8
 ; = (write dereference)
 write 0 r2 r8
 or r0 r8 r2
 ; RPN'ized expression: "v 1 += "
 ; Expanded expression: "(@-4) 1 +=(4) "
 ; 1
 load32 1 r2
 ; local ofs
 ; +=
 read -4 r14 r12
 add r12 r2 r2
 write -4 r14 r2
 ; }
Label_40:
 ; local ofs
 ; ++p
 read -8 r14 r2
 add r2 1 r2
 write -8 r14 r2
 sub r2 1 r2
 jump Label_39
Label_42:
 ; for
 ; RPN'ized expression: "i 0 = "
 ; Expanded expression: "(@-8) 0 =(-1) "
 ; 0
 ; local ofs
 ; =
 write -8 r14 r0
Label_43:
 ; RPN'ized expression: "i 40 < "
 ; Expanded expression: "(@-8) *(-1) 40 < "
 ; local ofs
 ; * (read dereference)
 read -8 r14 r2
 ; 40
 ; <
 load32 40 r11
 bges r2 r11 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 bne r2 r0 2
 jump Label_46
 ; RPN'ized expression: "i ++p "
 ; Expanded expression: "(@-8) ++p(-1) "
 ; {
 ; RPN'ized expression: "v *u 0 = "
 ; Expanded expression: "(@-4) *(4) 0 =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; 0
 ; =
 write 0 r2 r0
 ; RPN'ized expression: "v 1 += "
 ; Expanded expression: "(@-4) 1 +=(4) "
 ; 1
 load32 1 r2
 ; local ofs
 ; +=
 read -4 r14 r12
 add r12 r2 r2
 write -4 r14 r2
 ; }
Label_44:
 ; local ofs
 ; ++p
 read -8 r14 r2
 add r2 1 r2
 write -8 r14 r2
 sub r2 1 r2
 jump Label_43
Label_46:
Label_37:
 read 0 r14 r14
 add r13 16 r13
 jumpr 0 r15

 ; glb GFX_printCursor : () void
.code
; .globl GFX_printCursor
GFX_printCursor:
 sub r13         12 r13
 write          4 r13 r14
 add r13          4 r14
 ; write 4 r14 r15
 ; loc     v : (@-4) : * char
 ; loc     <something> : * char
 ; RPN'ized expression: "v 12588064 (something48) = "
 ; Expanded expression: "(@-4) 12588064 =(4) "
 ; 12588064
 load32 12588064 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; RPN'ized expression: "v GFX_cursor + *u 219 = "
 ; Expanded expression: "(@-4) *(4) GFX_cursor *(-1) + 219 =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r8
 ; +
 add r2 r8 r2
 ; 219
 load32 219 r8
 ; = (write dereference)
 write 0 r2 r8
 or r0 r8 r2
Label_47:
 read 0 r14 r14
 add r13 12 r13
 jumpr 0 r15

 ; glb GFX_PrintcConsole : (
 ; prm     c : char
 ;     ) void
.code
; .globl GFX_PrintcConsole
GFX_PrintcConsole:
 write 0 r13 r4
 sub r13         16 r13
 write          8 r13 r14
 add r13          8 r14
   write 4 r14 r15
 ; loc     c : (@8) : char
 ; if
 ; RPN'ized expression: "c 10 == "
 ; Expanded expression: "(@8) *(-1) 10 == "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 10
 ; ==
 load32 10 r1
 xor r2 r1 r2
 beq r2 r0 2
 jump Label_50
 ; {
 ; loc         v : (@-4) : * char
 ; loc         <something> : * char
 ; RPN'ized expression: "v 12588064 (something52) = "
 ; Expanded expression: "(@-4) 12588064 =(4) "
 ; 12588064
 load32 12588064 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; RPN'ized expression: "v GFX_cursor + *u 0 = "
 ; Expanded expression: "(@-4) *(4) GFX_cursor *(-1) + 0 =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r8
 ; +
 add r2 r8 r2
 ; 0
 ; =
 write 0 r2 r0
 ; loc         nl : (@-8) : char
 ; RPN'ized expression: "nl ( 40 , GFX_cursor MATH_div ) 1 + = "
 ; Expanded expression: "(@-8)  40  GFX_cursor *(-1)  MATH_div ()8 1 + =(-1) "
 ; (
 ; 40
 load32 40 r5
 ; ,
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r4
 ; ,
 ; MATH_div
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump MATH_div
 add r13 16 r13
 ; 1
 ; +
 add r2 1 r2
 ; local ofs
 ; = (write dereference)
 write -8 r14 r2
 ; RPN'ized expression: "GFX_cursor nl 40 * = "
 ; Expanded expression: "GFX_cursor (@-8) *(-1) 40 * =(-1) "
 ; local ofs
 ; * (read dereference)
 read -8 r14 r2
 ; 40
 load32 40 r8
 ; *
 mult r2 r8 r2
 ; GFX_cursor
 ; = (write dereference)
 addr2reg GFX_cursor r1
 write 0 r1 r2
 ; }
 jump Label_51
Label_50:
 ; else
 ; if
 ; RPN'ized expression: "c 8 == "
 ; Expanded expression: "(@8) *(-1) 8 == "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 8
 ; ==
 load32 8 r1
 xor r2 r1 r2
 beq r2 r0 2
 jump Label_53
 ; {
 ; if
 ; RPN'ized expression: "GFX_cursor 0 > "
 ; Expanded expression: "GFX_cursor *(-1) 0 > "
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r2
 ; 0
 ; >
 bgts r2 r0 2
 jump Label_55
 ; {
 ; loc             v : (@-4) : * char
 ; loc             <something> : * char
 ; RPN'ized expression: "v 12588064 (something57) = "
 ; Expanded expression: "(@-4) 12588064 =(4) "
 ; 12588064
 load32 12588064 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; RPN'ized expression: "v GFX_cursor + *u 0 = "
 ; Expanded expression: "(@-4) *(4) GFX_cursor *(-1) + 0 =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r8
 ; +
 add r2 r8 r2
 ; 0
 ; =
 write 0 r2 r0
 ; RPN'ized expression: "v GFX_cursor + 1 - *u 0 = "
 ; Expanded expression: "(@-4) *(4) GFX_cursor *(-1) + 1 - 0 =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r8
 ; +
 add r2 r8 r2
 ; 1
 ; -
 sub r2 1 r2
 ; 0
 ; =
 write 0 r2 r0
 ; RPN'ized expression: "GFX_cursor 1 -= "
 ; Expanded expression: "GFX_cursor 1 -=(-1) "
 ; 1
 load32 1 r2
 ; GFX_cursor
 ; -=
 addr2reg GFX_cursor r1
 read 0 r1 r12
 sub r12 r2 r2
 addr2reg GFX_cursor r1
 write 0 r1 r2
 ; }
Label_55:
 ; }
 jump Label_54
Label_53:
 ; else
 ; if
 ; RPN'ized expression: "c 13 == "
 ; Expanded expression: "(@8) *(-1) 13 == "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; 13
 ; ==
 load32 13 r1
 xor r2 r1 r2
 beq r2 r0 2
 jump Label_58
 ; {
 ; }
 jump Label_59
Label_58:
 ; else
 ; {
 ; loc         v : (@-4) : * char
 ; loc         <something> : * char
 ; RPN'ized expression: "v 12588064 (something60) = "
 ; Expanded expression: "(@-4) 12588064 =(4) "
 ; 12588064
 load32 12588064 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; loc         <something> : char
 ; RPN'ized expression: "v GFX_cursor + *u c (something61) = "
 ; Expanded expression: "(@-4) *(4) GFX_cursor *(-1) + (@8) *(-1) signed char =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r8
 ; +
 add r2 r8 r2
 ; local ofs
 ; * (read dereference)
 read 8 r14 r8
 ; signed char
 ; = (write dereference)
 write 0 r2 r8
 or r0 r8 r2
 ; RPN'ized expression: "GFX_cursor 1 += "
 ; Expanded expression: "GFX_cursor 1 +=(-1) "
 ; 1
 load32 1 r2
 ; GFX_cursor
 ; +=
 addr2reg GFX_cursor r1
 read 0 r1 r12
 add r12 r2 r2
 addr2reg GFX_cursor r1
 write 0 r1 r2
 ; }
Label_59:
Label_54:
Label_51:
 ; if
 ; RPN'ized expression: "GFX_cursor 1000 >= "
 ; Expanded expression: "GFX_cursor *(-1) 1000 >= "
 ; GFX_cursor
 ; * (read dereference)
 addr2reg GFX_cursor r1
 read 0 r1 r2
 ; 1000
 ; >=
 load32 1000 r11
 bges r2 r11 3
 load32 1 r2
 jumpo 2
 load32 0 r2
 beq r2 r0 2
 jump Label_62
 ; {
 ; RPN'ized expression: "( GFX_ScrollUp ) "
 ; Expanded expression: " GFX_ScrollUp ()0 "
 ; (
 ; GFX_ScrollUp
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_ScrollUp
 add r13 16 r13
 ; RPN'ized expression: "GFX_cursor 960 = "
 ; Expanded expression: "GFX_cursor 960 =(-1) "
 ; 960
 load32 960 r2
 ; GFX_cursor
 ; = (write dereference)
 addr2reg GFX_cursor r1
 write 0 r1 r2
 ; }
Label_62:
 ; RPN'ized expression: "( GFX_printCursor ) "
 ; Expanded expression: " GFX_printCursor ()0 "
 ; (
 ; GFX_printCursor
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_printCursor
 add r13 16 r13
Label_49:
 read 4 r14 r15
 read 0 r14 r14
 add r13 16 r13
 jumpr 0 r15

 ; glb GFX_PrintConsole : (
 ; prm     str : * char
 ;     ) void
.code
; .globl GFX_PrintConsole
GFX_PrintConsole:
 write 0 r13 r4
 sub r13         12 r13
 write          4 r13 r14
 add r13          4 r14
   write 4 r14 r15
 ; loc     str : (@8) : * char
 ; loc     chr : (@-4) : char
 ; RPN'ized expression: "chr str *u = "
 ; Expanded expression: "(@-4) (@8) *(4) *(-1) =(-1) "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; * (read dereference)
 read 0 r2 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; while
 ; RPN'ized expression: "chr 0 != "
 ; Expanded expression: "(@-4) *(-1) 0 != "
Label_65:
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; 0
 ; !=
 bne r2 r0 2
 jump Label_66
 ; {
 ; loc         <something> : char
 ; RPN'ized expression: "( chr (something67) GFX_PrintcConsole ) "
 ; Expanded expression: " (@-4) *(-1) signed char  GFX_PrintcConsole ()4 "
 ; (
 ; local ofs
 ; * (read dereference)
 read -4 r14 r4
 ; signed char
 ; ,
 ; GFX_PrintcConsole
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_PrintcConsole
 add r13 16 r13
 ; RPN'ized expression: "str ++p "
 ; Expanded expression: "(@8) ++p(4) "
 ; local ofs
 ; ++p
 read 8 r14 r2
 add r2 1 r2
 write 8 r14 r2
 sub r2 1 r2
 ; RPN'ized expression: "chr str *u = "
 ; Expanded expression: "(@-4) (@8) *(4) *(-1) =(-1) "
 ; local ofs
 ; * (read dereference)
 read 8 r14 r2
 ; * (read dereference)
 read 0 r2 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; }
 jump Label_65
Label_66:
Label_64:
 read 4 r14 r15
 read 0 r14 r14
 add r13 12 r13
 jumpr 0 r15

 ; glb DATA_PALETTE_DEFAULT : () void
.code
; .globl DATA_PALETTE_DEFAULT
DATA_PALETTE_DEFAULT:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
.dw 0b00000000000000001111111111111111 ; green, black,  white,  white
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000

Label_68:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb DATA_ASCII_DEFAULT : () void
.code
; .globl DATA_ASCII_DEFAULT
DATA_ASCII_DEFAULT:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111111001100000000000011
.dw 0b11001100001100111100000000000011
.dw 0b11001111111100111100001111000011
.dw 0b11000000000000110011111111111100
.dw 0b00111111111111001111111111111111
.dw 0b11110011110011111111111111111111
.dw 0b11110000000011111111110000111111
.dw 0b11111111111111110011111111111100
.dw 0b00111100111100001111111111111100
.dw 0b11111111111111001111111111111100
.dw 0b00111111111100000000111111000000
.dw 0b00000011000000000000000000000000
.dw 0b00000011000000000000111111000000
.dw 0b00111111111100001111111111111100
.dw 0b00111111111100000000111111000000
.dw 0b00000011000000000000000000000000
.dw 0b00001111110000000011111111110000
.dw 0b00001111110000001111111111111100
.dw 0b11111111111111001111001100111100
.dw 0b00000011000000000000111111000000
.dw 0b00000011000000000000001100000000
.dw 0b00001111110000000011111111110000
.dw 0b11111111111111000011111111110000
.dw 0b00000011000000000000111111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000111111110000
.dw 0b00001111111100000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111111111111111111111
.dw 0b11111100001111111111000000001111
.dw 0b11110000000011111111110000111111
.dw 0b11111111111111111111111111111111
.dw 0b00000000000000000000111111110000
.dw 0b00111100001111000011000000001100
.dw 0b00110000000011000011110000111100
.dw 0b00001111111100000000000000000000
.dw 0b11111111111111111111000000001111
.dw 0b11000011110000111100111111110011
.dw 0b11001111111100111100001111000011
.dw 0b11110000000011111111111111111111
.dw 0b00000000111111110000000000111111
.dw 0b00000000111111110011111111110011
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b00001111111100000011110000111100
.dw 0b00111100001111000011110000111100
.dw 0b00001111111100000000001111000000
.dw 0b00111111111111000000001111000000
.dw 0b00001111111111110000111100001111
.dw 0b00001111111111110000111100000000
.dw 0b00001111000000000011111100000000
.dw 0b11111111000000001111110000000000
.dw 0b00111111111111110011110000001111
.dw 0b00111111111111110011110000001111
.dw 0b00111100000011110011110000111111
.dw 0b11111100001111001111000000000000
.dw 0b00000011110000001111001111001111
.dw 0b00001111111100001111110000111111
.dw 0b11111100001111110000111111110000
.dw 0b11110011110011110000001111000000
.dw 0b11000000000000001111110000000000
.dw 0b11111111110000001111111111111100
.dw 0b11111111110000001111110000000000
.dw 0b11000000000000000000000000000000
.dw 0b00000000000011000000000011111100
.dw 0b00001111111111001111111111111100
.dw 0b00001111111111000000000011111100
.dw 0b00000000000011000000000000000000
.dw 0b00000011110000000000111111110000
.dw 0b00111111111111000000001111000000
.dw 0b00000011110000000011111111111100
.dw 0b00001111111100000000001111000000
.dw 0b00111100001111000011110000111100
.dw 0b00111100001111000011110000111100
.dw 0b00111100001111000000000000000000
.dw 0b00111100001111000000000000000000
.dw 0b00111111111111111111001111001111
.dw 0b11110011110011110011111111001111
.dw 0b00000011110011110000001111001111
.dw 0b00000011110011110000000000000000
.dw 0b00001111111111000011110000001111
.dw 0b00001111110000000011110011110000
.dw 0b00111100111100000000111111000000
.dw 0b11110000111100000011111111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111111000011111111111100
.dw 0b00111111111111000000000000000000
.dw 0b00000011110000000000111111110000
.dw 0b00111111111111000000001111000000
.dw 0b00111111111111000000111111110000
.dw 0b00000011110000001111111111111111
.dw 0b00000011110000000000111111110000
.dw 0b00111111111111000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00111111111111000000111111110000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000001111000000
.dw 0b00000000111100001111111111111100
.dw 0b00000000111100000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00111100000000001111111111111100
.dw 0b00111100000000000000111100000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000000000001111000000000000
.dw 0b11110000000000001111111111111100
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000110000110000
.dw 0b00111100001111001111111111111111
.dw 0b00111100001111000000110000110000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000001111000000
.dw 0b00001111111100000011111111111100
.dw 0b11111111111111111111111111111111
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111111111111111
.dw 0b11111111111111110011111111111100
.dw 0b00001111111100000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111000000000011111111000000
.dw 0b00111111110000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00001111000000000000000000000000
.dw 0b00111100111100000011110011110000
.dw 0b00111100111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111100111100000011110011110000
.dw 0b11111111111111000011110011110000
.dw 0b11111111111111000011110011110000
.dw 0b00111100111100000000000000000000
.dw 0b00001111000000000011111111110000
.dw 0b11110000000000000011111111000000
.dw 0b00000000111100001111111111000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000001111000000111100
.dw 0b11110000111100000000001111000000
.dw 0b00001111000000000011110000111100
.dw 0b11110000001111000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b00001111110000000011111100111100
.dw 0b11110011111100001111000011110000
.dw 0b00111111001111000000000000000000
.dw 0b00111100000000000011110000000000
.dw 0b11110000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000000011110000000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000000000000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000000000000000000000
.dw 0b00000000000000000011110000111100
.dw 0b00001111111100001111111111111111
.dw 0b00001111111100000011110000111100
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000001111111111110000
.dw 0b00001111000000000000111100000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000011110000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000001111000000000011110000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000001111000000000000
.dw 0b11000000000000000000000000000000
.dw 0b00111111111100001111000000111100
.dw 0b11110000111111001111001111111100
.dw 0b11111111001111001111110000111100
.dw 0b00111111111100000000000000000000
.dw 0b00001111000000000011111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b11111111111100000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00000000111100000000111111000000
.dw 0b00111100000000001111000011110000
.dw 0b11111111111100000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00000000111100000000111111000000
.dw 0b00000000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000011111100000000111111110000
.dw 0b00111100111100001111000011110000
.dw 0b11111111111111000000000011110000
.dw 0b00000011111111000000000000000000
.dw 0b11111111111100001111000000000000
.dw 0b11111111110000000000000011110000
.dw 0b00000000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00001111110000000011110000000000
.dw 0b11110000000000001111111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b11111111111100001111000011110000
.dw 0b00000000111100000000001111000000
.dw 0b00001111000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100000011111111110000
.dw 0b00000000111100000000001111000000
.dw 0b00111111000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000011110000000000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000001111000000000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111100000000000000000000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000000000000000000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000000011110000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00000000111100000000001111000000
.dw 0b00001111000000000000000000000000
.dw 0b00001111000000000000000000000000
.dw 0b00111111111100001111000000111100
.dw 0b11110011111111001111001111111100
.dw 0b11110011111111001111000000000000
.dw 0b00111111110000000000000000000000
.dw 0b00001111000000000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b11111111111100001111000011110000
.dw 0b11110000111100000000000000000000
.dw 0b11111111111100000011110000111100
.dw 0b00111100001111000011111111110000
.dw 0b00111100001111000011110000111100
.dw 0b11111111111100000000000000000000
.dw 0b00001111111100000011110000111100
.dw 0b11110000000000001111000000000000
.dw 0b11110000000000000011110000111100
.dw 0b00001111111100000000000000000000
.dw 0b11111111110000000011110011110000
.dw 0b00111100001111000011110000111100
.dw 0b00111100001111000011110011110000
.dw 0b11111111110000000000000000000000
.dw 0b11111111111111000011110000001100
.dw 0b00111100110000000011111111000000
.dw 0b00111100110000000011110000001100
.dw 0b11111111111111000000000000000000
.dw 0b11111111111111000011110000001100
.dw 0b00111100110000000011111111000000
.dw 0b00111100110000000011110000000000
.dw 0b11111111000000000000000000000000
.dw 0b00001111111100000011110000111100
.dw 0b11110000000000001111000000000000
.dw 0b11110000111111000011110000111100
.dw 0b00001111111111000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111111111110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000000000000000000
.dw 0b00111111110000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b00000011111111000000000011110000
.dw 0b00000000111100000000000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b11111100001111000011110000111100
.dw 0b00111100111100000011111111000000
.dw 0b00111100111100000011110000111100
.dw 0b11111100001111000000000000000000
.dw 0b11111111000000000011110000000000
.dw 0b00111100000000000011110000000000
.dw 0b00111100000011000011110000111100
.dw 0b11111111111111000000000000000000
.dw 0b11110000001111001111110011111100
.dw 0b11111111111111001111111111111100
.dw 0b11110011001111001111000000111100
.dw 0b11110000001111000000000000000000
.dw 0b11110000001111001111110000111100
.dw 0b11111111001111001111001111111100
.dw 0b11110000111111001111000000111100
.dw 0b11110000001111000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111001111000000111100
.dw 0b11110000001111000011110011110000
.dw 0b00001111110000000000000000000000
.dw 0b11111111111100000011110000111100
.dw 0b00111100001111000011111111110000
.dw 0b00111100000000000011110000000000
.dw 0b11111111000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110011111100000011111111000000
.dw 0b00000011111100000000000000000000
.dw 0b11111111111100000011110000111100
.dw 0b00111100001111000011111111110000
.dw 0b00111100111100000011110000111100
.dw 0b11111100001111000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b11111111111100001100111100110000
.dw 0b00001111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11111111111100000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b00001111000000000000000000000000
.dw 0b11110000001111001111000000111100
.dw 0b11110000001111001111001100111100
.dw 0b11111111111111001111110011111100
.dw 0b11110000001111000000000000000000
.dw 0b11110000001111001111000000111100
.dw 0b00111100111100000000111111000000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b11111111111111001111000000111100
.dw 0b11000000111100000000001111000000
.dw 0b00001111000011000011110000111100
.dw 0b11111111111111000000000000000000
.dw 0b00111111110000000011110000000000
.dw 0b00111100000000000011110000000000
.dw 0b00111100000000000011110000000000
.dw 0b00111111110000000000000000000000
.dw 0b11110000000000000011110000000000
.dw 0b00001111000000000000001111000000
.dw 0b00000000111100000000000000111100
.dw 0b00000000000011000000000000000000
.dw 0b00111111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00111111110000000000000000000000
.dw 0b00000011000000000000111111000000
.dw 0b00111100111100001111000000111100
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111111111111111
.dw 0b00001111000000000000111100000000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111110000000000000011110000
.dw 0b00111111111100001111000011110000
.dw 0b00111111001111000000000000000000
.dw 0b11111100000000000011110000000000
.dw 0b00111100000000000011111111110000
.dw 0b00111100001111000011110000111100
.dw 0b11110011111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000000000001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000011111100000000000011110000
.dw 0b00000000111100000011111111110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111001111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11111111111100001111000000000000
.dw 0b00111111110000000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b00111100000000001111111100000000
.dw 0b00111100000000000011110000000000
.dw 0b11111111000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111001111001111000011110000
.dw 0b11110000111100000011111111110000
.dw 0b00000000111100001111111111000000
.dw 0b11111100000000000011110000000000
.dw 0b00111100111100000011111100111100
.dw 0b00111100001111000011110000111100
.dw 0b11111100001111000000000000000000
.dw 0b00001111000000000000000000000000
.dw 0b00111111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b00000000111100000000000000000000
.dw 0b00000000111100000000000011110000
.dw 0b00000000111100001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b11111100000000000011110000000000
.dw 0b00111100001111000011110011110000
.dw 0b00111111110000000011110011110000
.dw 0b11111100001111000000000000000000
.dw 0b00111111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000111100001111111111111100
.dw 0b11111111111111001111001100111100
.dw 0b11110000001111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111110000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110011111100000011110000111100
.dw 0b00111100001111000011111111110000
.dw 0b00111100000000001111111100000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111001111001111000011110000
.dw 0b11110000111100000011111111110000
.dw 0b00000000111100000000001111111100
.dw 0b00000000000000000000000000000000
.dw 0b11110011111100000011111100111100
.dw 0b00111100001111000011110000000000
.dw 0b11111111000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111100001111000000000000
.dw 0b00111111110000000000000011110000
.dw 0b11111111110000000000000000000000
.dw 0b00000011000000000000111100000000
.dw 0b00111111111100000000111100000000
.dw 0b00001111000000000000111100110000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111001111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000001111001111001100111100
.dw 0b11111111111111001111111111111100
.dw 0b00111100111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000001111000011110011110000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000011111111110000
.dw 0b00000000111100001111111111000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111100001100001111000000
.dw 0b00001111000000000011110000110000
.dw 0b11111111111100000000000000000000
.dw 0b00000011111100000000111100000000
.dw 0b00001111000000001111110000000000
.dw 0b00001111000000000000111100000000
.dw 0b00000011111100000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b11111100000000000000111100000000
.dw 0b00001111000000000000001111110000
.dw 0b00001111000000000000111100000000
.dw 0b11111100000000000000000000000000
.dw 0b00111111001111001111001111110000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000001100000000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111001111000000111100
.dw 0b11111111111111000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000000000001111000011110000
.dw 0b00111111110000000000001111000000
.dw 0b00000000111100000011111111000000
.dw 0b00000000000000001111000011110000
.dw 0b00000000000000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00000011111100000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11111111111100001111000000000000
.dw 0b00111111110000000000000000000000
.dw 0b00111111111111001111000000001111
.dw 0b00001111111100000000000000111100
.dw 0b00001111111111000011110000111100
.dw 0b00001111111111110000000000000000
.dw 0b11110000111100000000000000000000
.dw 0b00111111110000000000000011110000
.dw 0b00111111111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b11111100000000000000000000000000
.dw 0b00111111110000000000000011110000
.dw 0b00111111111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000011110000
.dw 0b00111111111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111110000001111000000000000
.dw 0b11110000000000000011111111000000
.dw 0b00000000111100000000111111000000
.dw 0b00111111111111001111000000001111
.dw 0b00001111111100000011110000111100
.dw 0b00111111111111000011110000000000
.dw 0b00001111111100000000000000000000
.dw 0b11110000111100000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11111111111100001111000000000000
.dw 0b00111111110000000000000000000000
.dw 0b11111100000000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11111111111100001111000000000000
.dw 0b00111111110000000000000000000000
.dw 0b11110000111100000000000000000000
.dw 0b00111111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b00111111111100001111000000111100
.dw 0b00001111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00001111111100000000000000000000
.dw 0b11111100000000000000000000000000
.dw 0b00111111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b11110000001111000000111111000000
.dw 0b00111100111100001111000000111100
.dw 0b11111111111111001111000000111100
.dw 0b11110000001111000000000000000000
.dw 0b00001111000000000000111100000000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111111111110000
.dw 0b11110000111100000000000000000000
.dw 0b00000011111100000000000000000000
.dw 0b11111111111100000011110000000000
.dw 0b00111111110000000011110000000000
.dw 0b11111111111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111111110000000011110000
.dw 0b00111111111111111111000011110000
.dw 0b00111111111111110000000000000000
.dw 0b00001111111111000011110011110000
.dw 0b11110000111100001111111111111100
.dw 0b11110000111100001111000011110000
.dw 0b11110000111111000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000001111000011110000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000001111110000000000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b00000000000000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00000000000000001111110000000000
.dw 0b00000000000000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00000000000000001111000011110000
.dw 0b00000000000000001111000011110000
.dw 0b11110000111100000011111111110000
.dw 0b00000000111100001111111111000000
.dw 0b11110000000011110000001111000000
.dw 0b00001111111100000011110000111100
.dw 0b00111100001111000000111111110000
.dw 0b00000011110000000000000000000000
.dw 0b11110000111100000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00111111111111001111000000000000
.dw 0b11110000000000000011111111111100
.dw 0b00000011110000000000001111000000
.dw 0b00001111110000000011110011110000
.dw 0b00111100001100001111111100000000
.dw 0b00111100000000001111110000111100
.dw 0b11111111111100000000000000000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000001111111111110000
.dw 0b00001111000000001111111111110000
.dw 0b00001111000000000000111100000000
.dw 0b11111111110000001111000011110000
.dw 0b11110000111100001111111111001100
.dw 0b11110000001111001111000011111111
.dw 0b11110000001111001111000000111111
.dw 0b00000000111111000000001111001111
.dw 0b00000011110000000000111111110000
.dw 0b00000011110000000000001111000000
.dw 0b11110011110000000011111100000000
.dw 0b00000011111100000000000000000000
.dw 0b00111111110000000000000011110000
.dw 0b00111111111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00001111110000000000000000000000
.dw 0b00111111000000000000111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000001111110000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000001111110000
.dw 0b00000000000000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111111111000000000000000000
.dw 0b00000000000000001111111111000000
.dw 0b00000000000000001111111111000000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000000000000000000
.dw 0b11111111111100000000000000000000
.dw 0b11110000111100001111110011110000
.dw 0b11111111111100001111001111110000
.dw 0b11110000111100000000000000000000
.dw 0b00001111111100000011110011110000
.dw 0b00111100111100000000111111111100
.dw 0b00000000000000000011111111111100
.dw 0b00000000000000000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b00111100111100000000111111000000
.dw 0b00000000000000000011111111110000
.dw 0b00000000000000000000000000000000
.dw 0b00001111000000000000000000000000
.dw 0b00001111000000000011110000000000
.dw 0b11110000000000001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111111111110000
.dw 0b11110000000000001111000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111111111110000
.dw 0b00000000111100000000000011110000
.dw 0b00000000000000000000000000000000
.dw 0b11110000000011111111000000111100
.dw 0b11110000111100001111001111111100
.dw 0b00001111000011110011110000111100
.dw 0b11110000111100000000000011111111
.dw 0b11110000000011111111000000111100
.dw 0b11110000111100001111001111001111
.dw 0b00001111001111110011110011111111
.dw 0b11110000111111110000000000001111
.dw 0b00000011110000000000001111000000
.dw 0b00000000000000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000111100001111
.dw 0b00111100001111001111000011110000
.dw 0b00111100001111000000111100001111
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000001111000011110000
.dw 0b00111100001111000000111100001111
.dw 0b00111100001111001111000011110000
.dw 0b00000000000000000000000000000000
.dw 0b00001100000011001100000011000000
.dw 0b00001100000011001100000011000000
.dw 0b00001100000011001100000011000000
.dw 0b00001100000011001100000011000000
.dw 0b00110011001100111100110011001100
.dw 0b00110011001100111100110011001100
.dw 0b00110011001100111100110011001100
.dw 0b00110011001100111100110011001100
.dw 0b11110011110011110011111100111111
.dw 0b11110011110011111111110011111100
.dw 0b11110011110011110011111100111111
.dw 0b11110011110011111111110011111100
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111110000000000001111000000
.dw 0b11111111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000000000000000000000000000000
.dw 0b11111111110000000000001111000000
.dw 0b11111111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00001111001111000000111100111100
.dw 0b11111111001111000000000000111100
.dw 0b11111111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111000000000000111100
.dw 0b11111111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111001111000000000000111100
.dw 0b11111111111111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111111111000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111110000000000001111000000
.dw 0b11111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111110000111100000000
.dw 0b00001111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111111111110000111100000000
.dw 0b00001111001111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111001111110000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b11111111001111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111110000111100000000
.dw 0b00001111001111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111001111000000111100111100
.dw 0b11111111001111110000000000000000
.dw 0b11111111001111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000011110000000000001111000000
.dw 0b11111111111111110000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000000000000000
.dw 0b11111111111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011111111110000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111111111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b11111111111111110000111100111100
.dw 0b00001111001111000000111100111100
.dw 0b00000011110000000000001111000000
.dw 0b11111111111111110000001111000000
.dw 0b11111111111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011111111110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b11111111111111111111111111111111
.dw 0b11111111111111111111111111111111
.dw 0b11111111111111111111111111111111
.dw 0b11111111111111111111111111111111
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b11111111111111111111111111111111
.dw 0b11111111111111111111111111111111
.dw 0b11111111000000001111111100000000
.dw 0b11111111000000001111111100000000
.dw 0b11111111000000001111111100000000
.dw 0b11111111000000001111111100000000
.dw 0b00000000111111110000000011111111
.dw 0b00000000111111110000000011111111
.dw 0b00000000111111110000000011111111
.dw 0b00000000111111110000000011111111
.dw 0b11111111111111111111111111111111
.dw 0b11111111111111111111111111111111
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111001111001111001111110000
.dw 0b11110000110000001111001111110000
.dw 0b00111111001111000000000000000000
.dw 0b00000000000000000011111111000000
.dw 0b11110000111100001111111111000000
.dw 0b11110000111100001111111111000000
.dw 0b11110000000000001111000000000000
.dw 0b00000000000000001111111111110000
.dw 0b11110000111100001111000000000000
.dw 0b11110000000000001111000000000000
.dw 0b11110000000000000000000000000000
.dw 0b00000000000000001111111111111100
.dw 0b00111100111100000011110011110000
.dw 0b00111100111100000011110011110000
.dw 0b00111100111100000000000000000000
.dw 0b11111111111100001111000011110000
.dw 0b00111100000000000000111100000000
.dw 0b00111100000000001111000011110000
.dw 0b11111111111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111111001111001111000000
.dw 0b11110011110000001111001111000000
.dw 0b00111111000000000000000000000000
.dw 0b00000000000000000011110000111100
.dw 0b00111100001111000011110000111100
.dw 0b00111100001111000011111111110000
.dw 0b00111100000000001111000000000000
.dw 0b00000000000000000011111100111100
.dw 0b11110011111100000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b11111111111100000000111100000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100000011111111000000
.dw 0b00001111000000001111111111110000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111001111111111111100
.dw 0b11110000001111000011110011110000
.dw 0b00001111110000000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b11110000001111001111000000111100
.dw 0b00111100111100000011110011110000
.dw 0b11111100111111000000000000000000
.dw 0b00000011111100000000111100000000
.dw 0b00000011110000000011111111110000
.dw 0b11110000111100001111000011110000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111111111001111001111001111
.dw 0b11110011110011110011111111111100
.dw 0b00000000000000000000000000000000
.dw 0b00000000001111000000000011110000
.dw 0b00111111111111001111001111001111
.dw 0b11110011110011110011111111111100
.dw 0b00111100000000001111000000000000
.dw 0b00001111110000000011110000000000
.dw 0b11110000000000001111111111000000
.dw 0b11110000000000000011110000000000
.dw 0b00001111110000000000000000000000
.dw 0b00111111110000001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100001111000011110000
.dw 0b11110000111100000000000000000000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000000000000000000000
.dw 0b00001111000000000000111100000000
.dw 0b11111111111100000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b11111111111100000000000000000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000000000000000000000
.dw 0b11111111111100000000000000000000
.dw 0b00000011110000000000111100000000
.dw 0b00111100000000000000111100000000
.dw 0b00000011110000000000000000000000
.dw 0b11111111111100000000000000000000
.dw 0b00000000111111000000001111001111
.dw 0b00000011110011110000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000000000001111000000
.dw 0b00000011110000001111001111000000
.dw 0b11110011110000000011111100000000
.dw 0b00001111000000000000111100000000
.dw 0b00000000000000001111111111110000
.dw 0b00000000000000000000111100000000
.dw 0b00001111000000000000000000000000
.dw 0b00000000000000000011111100111100
.dw 0b11110011111100000000000000000000
.dw 0b00111111001111001111001111110000
.dw 0b00000000000000000000000000000000
.dw 0b00001111110000000011110011110000
.dw 0b00111100111100000000111111000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000001111000000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000011110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000111111110000000011110000
.dw 0b00000000111100000000000011110000
.dw 0b11111100111100000011110011110000
.dw 0b00001111111100000000001111110000
.dw 0b00111111110000000011110011110000
.dw 0b00111100111100000011110011110000
.dw 0b00111100111100000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00111111000000000000001111000000
.dw 0b00001111000000000011110000000000
.dw 0b00111111110000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00001111111100000000111111110000
.dw 0b00001111111100000000111111110000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000
.dw 0b00000000000000000000000000000000

Label_69:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb BDOS_Init_FS : () char
.code
; .globl BDOS_Init_FS
BDOS_Init_FS:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_70:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb BDOS_Reinit_VRAM : () void
.code
; .globl BDOS_Reinit_VRAM
BDOS_Reinit_VRAM:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
   write 4 r14 r15
 ; RPN'ized expression: "( GFX_initVram ) "
 ; Expanded expression: " GFX_initVram ()0 "
 ; (
 ; GFX_initVram
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_initVram
 add r13 16 r13
 ; loc     <something> : char
 ; RPN'ized expression: "( DATA_PALETTE_DEFAULT (something72) GFX_copyPaletteTable ) "
 ; Expanded expression: " DATA_PALETTE_DEFAULT signed char  GFX_copyPaletteTable ()4 "
 ; (
 ; DATA_PALETTE_DEFAULT
 addr2reg DATA_PALETTE_DEFAULT r4
 ; signed char
 ; ,
 ; GFX_copyPaletteTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_copyPaletteTable
 add r13 16 r13
 ; loc     <something> : char
 ; RPN'ized expression: "( DATA_ASCII_DEFAULT (something73) GFX_copyPatternTable ) "
 ; Expanded expression: " DATA_ASCII_DEFAULT signed char  GFX_copyPatternTable ()4 "
 ; (
 ; DATA_ASCII_DEFAULT
 addr2reg DATA_ASCII_DEFAULT r4
 ; signed char
 ; ,
 ; GFX_copyPatternTable
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_copyPatternTable
 add r13 16 r13
 ; RPN'ized expression: "GFX_cursor 0 = "
 ; Expanded expression: "GFX_cursor 0 =(-1) "
 ; 0
 ; GFX_cursor
 ; =
 addr2reg GFX_cursor r1
 write 0 r1 r0
Label_71:
 read 4 r14 r15
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb BDOS_Backup : () void
.code
; .globl BDOS_Backup
BDOS_Backup:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_74:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb BDOS_Restore : () void
.code
; .globl BDOS_Restore
BDOS_Restore:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_75:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb main : () int
.code
; .globl main
main:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
   write 4 r14 r15
 ; RPN'ized expression: "UserprogramRunning 0 = "
 ; Expanded expression: "UserprogramRunning 0 =(-1) "
 ; 0
 ; UserprogramRunning
 ; =
 addr2reg UserprogramRunning r1
 write 0 r1 r0
 ; RPN'ized expression: "( BDOS_Reinit_VRAM ) "
 ; Expanded expression: " BDOS_Reinit_VRAM ()0 "
 ; (
 ; BDOS_Reinit_VRAM
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump BDOS_Reinit_VRAM
 add r13 16 r13

.rdata
Label_77:
.dw 66 68 79 83 10 
; .space 1
.dw 0

.code
 ; RPN'ized expression: "( L77 GFX_PrintConsole ) "
 ; Expanded expression: " L77  GFX_PrintConsole ()4 "
 ; (
 ; 77
 addr2reg Label_77 r4
 ; ,
 ; GFX_PrintConsole
 ; ) fxn call
 sub r13 16 r13
 savpc r15
 add r15 3 r15
 jump GFX_PrintConsole
 add r13 16 r13
 ; return
 ; RPN'ized expression: "0 "
 ; Expanded expression: "0 "
 ; Expression value: 0
 ; 0
 load32 0 r2
 jump Label_76
 ; 0
 load32 0 r2
Label_76:
 read 4 r14 r15
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb syscall : () void
.code
; .globl syscall
syscall:
 sub r13         16 r13
 write          8 r13 r14
 add r13          8 r14
 ; write 4 r14 r15
 ; loc     p : (@-4) : * char
 ; loc     <something> : * char
 ; RPN'ized expression: "p 2097152 (something79) = "
 ; Expanded expression: "(@-4) 2097152 =(4) "
 ; 2097152
 load32 2097152 r2
 ; local ofs
 ; = (write dereference)
 write -4 r14 r2
 ; loc     ID : (@-8) : char
 ; RPN'ized expression: "ID p 0 + *u = "
 ; Expanded expression: "(@-8) (@-4) *(4) 0 + *(-1) =(-1) "
 ; local ofs
 ; * (read dereference)
 read -4 r14 r2
 ; 0
 ; +
 add r2 0 r2
 ; * (read dereference)
 read 0 r2 r2
 ; local ofs
 ; = (write dereference)
 write -8 r14 r2
Label_78:
 read 0 r14 r14
 add r13 16 r13
 jumpr 0 r15

 ; glb int1 : () void
.code
; .globl int1
int1:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_80:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb int2 : () void
.code
; .globl int2
int2:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_81:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb int3 : () void
.code
; .globl int3
int3:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_82:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

 ; glb int4 : () void
.code
; .globl int4
int4:
 sub r13          8 r13
 write          0 r13 r14
 add r13          0 r14
 ; write 4 r14 r15
Label_83:
 read 0 r14 r14
 add r13 8 r13
 jumpr 0 r15

.code
; END OF COMPILED C CODE

; Interrupt handlers
; Has some administration before jumping to Label_int[ID]
; To prevent interfering with other stacks, they have their own stack
; Also, all registers have to be backed up and restored to hardware stack
; A return function has to be put on the stack as wel that the C code interrupt handler
; will jump to when it is done


.code
Int1:
    push r1
    push r2
    push r3
    push r4
    push r5
    push r6
    push r7
    push r8
    push r9
    push r10
    push r11
    push r12
    push r13
    push r14
    push r15

    load32 0x7FFFFF r13     ; initialize (BDOS) int stack address
    load32 0 r14            ; initialize base pointer address
    addr2reg Return_Interrupt r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump int1               ; jump to interrupt handler of C program
                            ; should return to the address we just put on the stack
    halt                    ; should not get here


Int2:
    push r1
    push r2
    push r3
    push r4
    push r5
    push r6
    push r7
    push r8
    push r9
    push r10
    push r11
    push r12
    push r13
    push r14
    push r15

    load32 0x7FFFFF r13     ; initialize (BDOS) int stack address
    load32 0 r14            ; initialize base pointer address
    addr2reg Return_Interrupt r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump int2               ; jump to interrupt handler of C program
                            ; should return to the address we just put on the stack
    halt                    ; should not get here


Int3:
    push r1
    push r2
    push r3
    push r4
    push r5
    push r6
    push r7
    push r8
    push r9
    push r10
    push r11
    push r12
    push r13
    push r14
    push r15

    load32 0x7FFFFF r13     ; initialize (BDOS) int stack address
    load32 0 r14            ; initialize base pointer address
    addr2reg Return_Interrupt r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump int3               ; jump to interrupt handler of C program
                            ; should return to the address we just put on the stack
    halt                    ; should not get here


Int4:
    push r1
    push r2
    push r3
    push r4
    push r5
    push r6
    push r7
    push r8
    push r9
    push r10
    push r11
    push r12
    push r13
    push r14
    push r15

    load32 0x7FFFFF r13     ; initialize (BDOS) int stack address
    load32 0 r14            ; initialize base pointer address
    addr2reg Return_Interrupt r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump int4               ; jump to interrupt handler of C program
                            ; should return to the address we just put on the stack
    halt                    ; should not get here


; Function that is called after any interrupt handler from C has returned
; Restores all registers and issues RETI instruction to continue from original code
Return_Interrupt:
    pop r15
    pop r14
    pop r13
    pop r12
    pop r11
    pop r10
    pop r9
    pop r8
    pop r7
    pop r6
    pop r5
    pop r4
    pop r3
    pop r2
    pop r1

    reti        ; return from interrrupt

    halt        ; should not get here
.code

; Syscall handler for OS
; Because this is not called during an interrupt, we use a different stack
;  located at the end of BDOS heap

Syscall:
    load32 0x3FFFFF r13     ; initialize syscall stack address
    load32 0 r14            ; initialize base pointer address
    addr2reg Return_Syscall r1 ; get address of return function
    or r0 r1 r15            ; copy return addr to r15
    jump syscall      ; jump to syscall handler of C program
                            ; should return to the address we just put on the stack
    halt                    ; should not get here

Return_Syscall:
    pop r1
    jumpr 3 r1

    halt        ; should not get here

 ; Syntax/declaration table/stack:
 ; Bytes used: 1015/15360


 ; Macro table:
 ; Macro __SMALLER_C__ = `0x0100`
 ; Macro __SMALLER_C_32__ = ``
 ; Macro __SMALLER_C_SCHAR__ = ``
 ; Macro word = `char`
 ; Macro GFX_WINDOW_PATTERN_ADDR = `0xC01420`
 ; Macro GFX_WINDOW_PALETTE_ADDR = `0xC01C20`
 ; Macro RUN_ADDR = `0x400000`
 ; Macro TEMP_ADDR = `0x200000`
 ; Macro SYSCALL_RETVAL_ADDR = `0x200000`
 ; Macro INTID_TIMER2 = `0x0`
 ; Macro INTID_TIMER3 = `0x1`
 ; Macro INTID_PS2 = `0x2`
 ; Macro INTID_UART1 = `0x3`
 ; Macro INTID_UART2 = `0x4`
 ; Bytes used: 296/5120


 ; Identifier table:
 ; Ident 
 ; Ident UserprogramRunning
 ; Ident BDOS_Backup
 ; Ident BDOS_Restore
 ; Ident MATH_divmod
 ; Ident dividend
 ; Ident divisor
 ; Ident rem
 ; Ident MATH_div
 ; Ident MATH_mod
 ; Ident GFX_cursor
 ; Ident GFX_asmDefines
 ; Ident GFX_printWindowColored
 ; Ident addr
 ; Ident len
 ; Ident pos
 ; Ident palette
 ; Ident GFX_printBGColored
 ; Ident GFX_copyPatternTable
 ; Ident GFX_copyPaletteTable
 ; Ident GFX_clearBGtileTable
 ; Ident GFX_clearBGpaletteTable
 ; Ident GFX_clearWindowtileTable
 ; Ident GFX_clearWindowpaletteTable
 ; Ident GFX_clearSprites
 ; Ident GFX_clearParameters
 ; Ident GFX_initVram
 ; Ident GFX_WindowPosFromXY
 ; Ident x
 ; Ident y
 ; Ident GFX_BackgroundPosFromXY
 ; Ident GFX_ScrollUp
 ; Ident GFX_printCursor
 ; Ident GFX_PrintcConsole
 ; Ident c
 ; Ident GFX_PrintConsole
 ; Ident str
 ; Ident DATA_PALETTE_DEFAULT
 ; Ident DATA_ASCII_DEFAULT
 ; Ident BDOS_Init_FS
 ; Ident BDOS_Reinit_VRAM
 ; Ident main
 ; Ident syscall
 ; Ident int1
 ; Ident int2
 ; Ident int3
 ; Ident int4
 ; Bytes used: 643/5632

 ; Next label number: 84
 ; Compilation succeeded.
